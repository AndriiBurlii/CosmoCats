openapi: 3.0.3
info:
  title: Cosmo Cats Marketplace - Product API
  version: 1.0.0
servers:
  - url: /api
paths:
  /products:
    get:
      summary: List products
      operationId: listProducts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Product' }
    post:
      summary: Create product
      operationId: createProduct
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductCreateRequest' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Product' }
        '400':
          $ref: '#/components/responses/BadRequest'
  /products/{id}:
    get:
      summary: Get product by id
      operationId: getProduct
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Product' }
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update product
      operationId: updateProduct
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductUpdateRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Product' }
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete product
      operationId: deleteProduct
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204': { description: No Content }
        '404':
          $ref: '#/components/responses/NotFound'

components:
  schemas:
    Product:
      type: object
      properties:
        id: { type: string, format: uuid }
        name:
          type: string
          minLength: 2
          maxLength: 100
          description: Must include a cosmic term (e.g. star, galaxy, comet)
        description:
          type: string
          minLength: 5
          maxLength: 500
        price:
          type: number
          format: double
          minimum: 0.01
        categoryId: { type: string, format: uuid }
      required: [id, name, description, price, categoryId]

    ProductCreateRequest:
      type: object
      properties:
        name: { type: string, minLength: 2, maxLength: 100 }
        description: { type: string, minLength: 5, maxLength: 500 }
        price: { type: number, format: double, minimum: 0.01 }
        categoryId: { type: string, format: uuid }
      required: [name, description, price, categoryId]

    ProductUpdateRequest:
      allOf:
        - $ref: '#/components/schemas/ProductCreateRequest'

    Problem:
      type: object
      properties:
        type: { type: string, format: uri }
        title: { type: string }
        status: { type: integer }
        detail: { type: string }
        instance: { type: string }
        timestamp: { type: string, format: date-time }
        error: { type: string }
        message: { type: string }
        path: { type: string }
        errors:
          type: array
          items:
            type: object
            properties:
              field: { type: string }
              rejectedValue: { }
              message: { type: string }

  responses:
    BadRequest:
      description: Validation error
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Problem' }
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Problem' }
